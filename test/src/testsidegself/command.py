import os.path
import lxml.etree


# There are three commands which are not usable from
# Selenium IDE because they expect 3 arguments, we omit them here.
# See http://code.google.com/p/selenium/issues/detail?id=619
OMIT_COMMANDS = [
    'storeOrdered',
    'storeWhetherThisFrameMatchFrameExpression',
    'storeWhetherThisWindowMatchWindowExpression',
    ]


def convert_args(command, text):
    """Convert the arguments of a command to a tuple.

    Input looks something like:
    assertErrorOnNext
		(
			message
		)

    """
    raw_args = text.replace(command, '').replace('(', '').replace(')', '')
    if raw_args.strip():
        args = tuple(x.strip() for x in raw_args.split(','))
    else:
        # Prevent argument form being an empty string:
        args = ()
    return args


def convert_command_element(el):
    """Convert an lxml of a genuine command element to a tuple:

    (command, <arg1>, <arg2>, ...)

    Input looks something like:
    <a name="assertErrorOnNext"></a>assertErrorOnNext
		(
			message
		)

    """
    command = el.get('name')
    if command in OMIT_COMMANDS:
        return ()
    return (command, ) + convert_args(command, el.tail)


def convert_autogenerated_command_element(el):
    """Convert an lxml of a autogenerated command element to a tuple:

    (command, <arg1>, <arg2>, ...)

    Inout looks something like:
    <li>assertNotErrorOnNext
				(
					message
				)
			</li>
    """
    text = lxml.etree.tostring(el).replace('<li>', '').replace('</li>', '')
    command = text.split('(')[0]
    command = command.strip()
    if command in OMIT_COMMANDS:
        return ()
    text = text.replace('<a href="#patterns">pattern</a>', 'pattern')
    return (command, ) + convert_args(command, text)


def extract(path):
    """Extract commands and arguments from reference.html into a list."""
    ref = os.path.join(path, 'reference.html')
    parser = lxml.etree.XMLParser(remove_blank_text=True, recover=True)
    tree = lxml.etree.parse(ref, parser=parser)
    # Extracting genuine commands
    command_elements = tree.xpath('//strong/a')
    commands = [convert_command_element(e) for e in command_elements]
    # Extracting autogenerated commands
    auto_elements = tree.xpath(
        '//ul[preceding-sibling::p['
        'text()="Related Assertions, automatically generated:"]]/li')
    assert len(auto_elements) > 10, (
        "Extraction of autogenerated commands has failed.")
    commands.extend(
        convert_autogenerated_command_element(x) for x in auto_elements)
    # The convert commands might produce empty entries which get filtered now:
    commands = [x for x in commands if x]
    return commands

# TODO add unknown command to test code branch for these ones